#!/usr/bin/env node

/**
 * Module dependencies.
 */

var db;
var app = require('../app');
var debug = require('debug')('api.pesenin:server');

// HTTP
// var http = require('http');

// // HTTPS
const { readFileSync } = require("fs");
const { createServer } = require("https");

const { queues } = require('../app/controllers/order.controller');

/**
 * currently using MongoDB Atlas, if you want to use Locally change to local configuration
 */

if (process.env.DB_OPTION === 'ATLAS') {
  db = require('../database/atlas');
} else {
  db = require('../database/local');
}

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

// var server = http.createServer(app);

/**
 * Create HTTPS server
 */

// var server = https.createServer({
//   key: fs.readFileSync('/etc/ssl/private/key.pem'),
//   cert: fs.readFileSync('/etc/ssl/certs/cert.pem'),
//   ca: fs.readFileSync('/etc/ssl/certs/ca-certificates.crt'),
//   requestCert: true,
//   rejectUnauthorized: false
// }, app);

var httpServer = createServer({
  key: readFileSync('/etc/ssl/private/key.pem'),
  cert: readFileSync('/etc/ssl/certs/cert.pem'),
}, app);

/**
 * Socket IO Implemention
 */

const io = new Server(httpServer, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"],
    // credentials: true,
  },
  // transports: [
  //   'websocket',
    // 'flashsocket',
    // 'htmlfile',
    // 'xhr-polling',
    // 'jsonp-polling',
    // 'polling'
  // ],
  // secure: true,
});

io.on('connection', (socket) => {
  socket.on('queue', async (data) => {
    socket.emit(data, await queues(data));
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

db.on('open', function() {
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
